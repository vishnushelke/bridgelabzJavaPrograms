package com.bridgelabz.utility;

public class Utility {
	public static void Distance(double x, double y)
	{
		double a= Math.pow(x,2);
		double b= Math.pow(y,2);

		System.out.println(Math.sqrt(a+b));

	}
	public static void Doubleopt(double a,double b,double c)
	{
		double d=a+b*c;
		double e=a*b+c;
		double f=c+a/b;
		double g=a%b+c;
		
		System.out.println(d);
		System.out.println(e);
		System.out.println(f);
		System.out.println(g);
	}
	
	public static double Harmonic(int n)
	{
		double H=0.0;
		for(double i=1;i<=n;i++)
		{
			H=H+(1/i);
		}
		return H;
	}
	
	public static double SineOfAngle(int angle)
	{
		double r=Math.toRadians(angle);
		double sine=Math.sin(r);
		return sine;
	}
	
	
	public static double CosineOfAngle(int angle)
	{
		double r=Math.toRadians(angle);
		double cosine=Math.cos(r);
		return cosine;
	}
	
	public static void Binary(int n)
	{
		int x=0;
		int arr[]=new int[32];
		
		while((Math.pow(2,x))<n)
		{
			x++;
		}
		for(int i=0;i<x;i++)
		{
			arr[i]=n%2;
			n=n/2;
			
		}
		
		
		for(int i=31-x;i>=x;i--)
		{
			arr[i]=0;
		}
		for(int i=31;i>=0;i--)
		{
			System.out.print(arr[i]);
		}
	}
	
	
	public static double Futurevalue(int c,int r,int t)
	{
		double futureValue=c*Math.pow(1+r, t);
		System.out.println(futureValue);
		return futureValue;
	}
	
	public static double PresentValue(int c, int r, int t)
	{
		double prevalue=c/Math.pow(1+r, t);
		System.out.println(prevalue);
		return prevalue;
	}
	
	public static double sqrt(double n)
	{
		double t=n;
		double epsilon=1e-15;
		while(Math.abs(t-n/t)>epsilon*t)
		t=(t+n/t)/2;
		System.out.println(t);
		return t;
	}
	
	public static long start()
	{
		long starttime=System.nanoTime();
		return starttime;
	}
	
	public static void end(long starttime)
	{
		long endtime=System.nanoTime();
		long timeElapsed=endtime-starttime;
		System.out.println("Running Time of Program is ="+timeElapsed+" NanoSeconds");
	}
	
	public static void swap(char[] arr, int i, int j) {
		char c = arr[i];
		arr[i] = arr[j];
		arr[j] = c;
	}
	
	public static String[] WordSort(String a[])
	{
		int n=a.length;
		
		String temp="";
		
		for(int i=0;i<n;i++)
		{
			for(int j=i+1;j<n;j++)
			{
				if(a[i].compareTo(a[j])>0)
				{
					temp=a[i];
					a[i]=a[j];
					a[j]=temp;
				}
			}
		
		}
		
		for(int i=0;i<n;i++)
		{
			System.out.print(a[i]+" ");
		}
		return a;
	}
	
	public static void reverse(char[] arr, int i, int j)
	{
		// do till two end-points intersect
		while (i < j) {
			swap(arr, i++, j--);
		}
	}
	
	public static boolean isPrime(int n)
	{
		boolean b=false;
		
		for(int i=2;i<n/2;i++)
		{
			if(n%i==0 || i==0 || i==1)
				b=true;
			
		}
		if(b==true)
		System.out.println("number is not prime");
		else
			System.out.println("number is prime");
		return b;
	}
	
	public static int factorial(int n)
	{
		int fact=1;
		for (int i=1;i<=n;i++)
			fact=fact*i;
		System.out.println(fact);
		return fact;
	}
	
	public static void MaxAndMin(int a[])
	{
		int max=Integer.MIN_VALUE;
		int n=a.length;
		
		for(int i=0;i<n;i++)
		{
			if(max<a[i])
			{
				max=a[i];
			}
		}
		System.out.println(max);
		
		int min=Integer.MAX_VALUE;
		for(int i=0;i<n;i++)
		{
			if(min>a[i])
			{
				min=a[i];
			}
		}
		System.out.println(min);
	}
	
	public static void CheckCollinearUsingSlope(double x1,double y1, double x2,double y2,double x3,double y3,double x4,double y4)
	{
		boolean b=false;
		double s1=(y2-y1)/(x2-x1);
		double s2=(y3-y2)/(x3-x2);
		double s3=(y3-y1)/(x3-x1);
		if(s1==s2 && s2==s3 && s1==s3)
		{
			b=true;
		}
		else b=false;
		System.out.println(b);
	}

}
