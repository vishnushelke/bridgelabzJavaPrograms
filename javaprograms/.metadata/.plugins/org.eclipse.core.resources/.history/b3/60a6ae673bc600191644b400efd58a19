package com.bridgelabz.lib;
import java.util.*;
public class StringFunctions {
	
	public static void swap(char[]arr , int i, int j)
	{
		char c=arr[i];
		arr[i]=arr[j];
		arr[j]=c;
	}
	

	public static void reverse(char arr[],int i, int j)
	{
		while(i<j)
		{
			swap(arr,i++,j--);
		}
	}
	
	public static int factorial(int p)
	{
		int n=1;
		for (int i=1;i<=p;i++)
		{
			n=n*i;
		}
		return n;
	}


	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the first string");
		String s1=sc.nextLine();
		
		System.out.println("Enter the second string");
		String s2=sc.nextLine();
		int x=0,y=0;
		sc.close();
		//checking for anagram
		if(s1.length()!=s2.length())
		{
			x=0;
		}
		else
		{
		for(int i=0;i<s1.length();i++)
		{
			y=0;
			for(int j=0;j<s2.length();j++)
			{
				if(s1.charAt(i)==s2.charAt(j))
				{
					x=1;
					break;
				}
				if(x==0)
				{
					y=1;
				}
				
			}
			
			
		}
		
		}
		if(y==1)
		{
			System.out.println("Strings are not anagram");
		}
		else System.out.println("Strings are anagram");
		
		
		//checking for palindrome
		String rev="";
		int z=s1.length()-1;
		for(int i=z;i>=0;i--)
		{
			rev+=s1.charAt(i);	
			
		}
		if(s1.equals(rev))
		{
			System.out.println("String1 is palindrome");
		}
		else System.out.println("String1 is not palindrome");
	
	//permutation of string using iterative method
		
		
		class Permutations
		{
			// Utility function to swap two characters in a character array
			public static void swap(char[] arr, int i, int j) {
				char c = arr[i];
				arr[i] = arr[j];
				arr[j] = c;
			}

			// Utility function to reverse a char array between specified indices 
			private static void reverse(char[] arr, int i, int j)
			{
				// do till two end-points intersect
				while (i < j) {
					swap(arr, i++, j--);
				}
			}

			// Iterative function to find permutations of a String in Java
			public static void permutations(String str, int n)
			{
				// sort the string in natural order
				char[] s = str.toCharArray();
				Arrays.sort(s);

				while (true)
				{
					// Print current permutation
					System.out.print(String.valueOf(s) + " ");

					/* Below code will rearrange the string to next lexicographically
					 ordered permutation (if any) or return if we are already at
					 highest possible permutation */

					// Find largest index i such that s[i-1] is less than s[i]
					int i = n - 1;
					while (s[i-1] >= s[i])
					{
						// if i is first index of the string, that means we are 
						// already at last possible permutation 
						// (string is sorted in reverse order)
						if (--i == 0)
							return;
					}

					// find highest index j to the right of index i such that 
					// s[j] > s[iâ€“1] (s[i..n-1] is sorted in reverse order)

					int j = n - 1;
					while (j > i && s[j] <= s[i-1])
						j--;

					// Swap characters at index i-1 with index j
					swap(s, i-1, j);

					// reverse the substring s[i..n-1] and return true
					reverse (s, i, n-1);
				}
			}

			// Iterative program to find permutations of a String in Java
			public static void main(String[] args)
			{
				String s = "ABC";
				permutations(s, s.length());
			}
		}
	}

}
